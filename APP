# Define UI for application that draws a histogram
ui <- navbarPage(
  title ="同儕評量質性回饋正負評自動化分析系統",
  tabPanel("資料上傳",
           sidebarLayout(
             sidebarPanel(
               fileInput("UPLOAD","上傳到UPLOAD資料表"),
               actionButton("UPLOAD_B","上傳UPLOAD資料表")),
             mainPanel(tableOutput("UPLOADOutput")))),
  
  tabPanel("學號、同儕互評場次",
           tabsetPanel(
             tabPanel("原語料庫:分詞檢視與訓練",
                      sidebarLayout(
                        sidebarPanel(
                          selectInput("ST_ID","ST_ID","DEFAULT"),
                          selectInput("CLASS_ID","CLASS_ID","DEFAULT"),
                          downloadButton("DOWNLOAD_CORPUS","下載該內容")
                          ),
                        mainPanel(
                          tableOutput("ST_ID")))
                      ),
             
             tabPanel("上傳語料庫:分詞檢視與訓練",
                      sidebarLayout(
                        sidebarPanel(
                          selectInput("ST_ID_U","ST_ID_U","DEFAULT"),
                          selectInput("CLASS_ID_U","CLASS_ID_U","DEFAULT"),
                          fileInput("CORPUS","CORPUS"),
                          downloadButton("DOWNLOAD_CORPUS_U","下載該內容")
                          ),
                        mainPanel(
                          tableOutput("ST_ID_U")))
                      ),
             
             tabPanel("文本矩陣計算",
                      sidebarLayout(
                        sidebarPanel(
                          checkboxInput("CORPUS_CK","原語料庫:分詞檢視與訓練"),
                          checkboxInput("CORPUS_CK_U","上傳語料庫:分詞檢視與訓練"),
                          downloadButton("DOWNLOAD_DTM","下載該內容"),
                          checkboxInput("TERM_CK","上傳評語詞彙"),
                          textOutput("TERM_STATS")
                        ),
                      mainPanel(
                          dataTableOutput("DTM"))
                      )
                      )
           )
           
  ),
  tabPanel("檢視評語權重",
           sidebarLayout(
             sidebarPanel(
               selectInput("ST_ID_WEIGHT","ST_ID_WEIGHT","DEFAULT"),
               selectInput("CLASS_ID_WEIGHT","CLASS_ID_WEIGHT","DEFAULT")
             ),
             mainPanel(
               dataTableOutput("TERMS_WEIGHT")))
           )

)



# Define server logic required to draw a histogram
server <- function(input,output,session){
  #顯示上傳檔案


  output$UPLOADOutput<-renderTable(
    read.csv(input$UPLOAD$datapath)
  )
  
  output$ST_ID<-renderTable({
    ST_ID()
  })
  
  output$ST_ID_U<-renderTable({
    ST_ID_U()
  })
  
  output$DTM<-renderDataTable({
    DTM()
  })
  output$TERM_STATS<-renderText({
    if(input$TERM_CK==TRUE)
    DTM_FETCH_TERMS()
  })
  
  output$TERMS_WEIGHT<-renderDataTable({
    TERMS_WEIGHT()
    })
    
  
  
  TERMS_WEIGHT<-function(){
    if(input$CLASS_ID_WEIGHT!="所有場次"){
      A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_WEIGHT,"'","AND inter_review_id=",input$CLASS_ID_WEIGHT)))
      
      cbind(A_DF_ONE[4:10],A_DF_ONE[15])
      
    }
    
    else if(input$CLASS_ID_WEIGHT=="所有場次"){
      
      A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_WEIGHT,"'")))
      
      cbind(A_DF_ALL[4:10],A_DF_ALL[15])
    }
  }
  
  DTM<-function(){
    A_CUT=worker(stop_word ="/home/rstudio/USER_STOPWORDS",user="/home/rstudio/USER_TERMS",bylines=TRUE)
    
    if(input$CORPUS_CK==TRUE){
      
      if(input$CLASS_ID!="所有場次"){
        
        A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'","AND inter_review_id=",input$CLASS_ID)))
        
        A_DF_ONE_15=toString(A_CUT[  str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[1]])
        
        for(u in 2:length(A_DF_ONE[,1]))
          A_DF_ONE_15=rbind(A_DF_ONE_15,toString(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        #it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )
        it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )
        vocab=create_vocabulary(it)
        vectorizer  = vocab_vectorizer(vocab)
        dtm = create_dtm(it, vectorizer)
        
        output$DOWNLOAD_DTM<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(cbind(A_DF_ONE[4],as.matrix(dtm)),file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        
        cbind(A_DF_ONE[4],as.matrix(dtm))
        
      }
      else if(input$CLASS_ID=="所有場次"){
        
        A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'")))
        
        A_DF_ALL_15=toString(A_CUT[  str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[1]])
        for(u in 2:length(A_DF_ALL[,1]))
          A_DF_ALL_15=rbind(A_DF_ALL_15,toString(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        #it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )
        it=itoken(str_replace_all( A_DF_ALL_15 , "[^[:alnum:]]"," ") )
        vocab=create_vocabulary(it)
        vectorizer  = vocab_vectorizer(vocab)
        dtm = create_dtm(it, vectorizer)

        output$DOWNLOAD_DTM<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(cbind(A_DF_ALL[4],as.matrix(dtm)),file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
       cbind(A_DF_ALL[4],as.matrix(dtm))      
   
        }

    }
    
    else if(input$CORPUS_CK_U==TRUE&& length(input$CORPUS)!=0){
      A_CUT_U=worker(stop_word ="/home/rstudio/USER_STOPWORDS",bylines=TRUE,user=input$CORPUS$datapath)
      
      if(input$CLASS_ID!="所有場次"){
        
        A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'","AND inter_review_id=",input$CLASS_ID)))
        
        A_DF_ONE_15=toString(A_CUT[  str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[1]])
        
        for(u in 2:length(A_DF_ONE[,1]))
          A_DF_ONE_15=rbind(A_DF_ONE_15,toString(A_CUT_U[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        #it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )
        it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )
        vocab=create_vocabulary(it)
        vectorizer  = vocab_vectorizer(vocab)
        dtm = create_dtm(it, vectorizer)
        as.matrix(dtm)  
        
        output$DOWNLOAD_DTM<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(cbind(A_DF_ONE[4],as.matrix(dtm)),file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        cbind(A_DF_ONE[4],as.matrix(dtm))
      }
      
      else if(input$CLASS_ID=="所有場次"){
        
        A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'")))
        
        
        A_DF_ALL_15=toString(A_CUT[  str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[1]])  
        
        for(u in 2:length(A_DF_ALL[,1]))
          A_DF_ALL_15=rbind(A_DF_ALL_15,toString(A_CUT_U[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        #it=itoken(str_replace_all( A_DF_ALL15 , "[^[:alnum:]]"," ") )
        it=itoken(str_replace_all( A_DF_ALL_15 , "[^[:alnum:]]"," ") )
        vocab=create_vocabulary(it)
        vectorizer  = vocab_vectorizer(vocab)
        dtm = create_dtm(it, vectorizer)
        
        output$DOWNLOAD_CORPUS_U<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(cbind(A_DF_ALL[4],as.matrix(dtm)),file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        cbind(A_DF_ALL[4],as.matrix(dtm))
        
      }

    }
    else{}
  }
  
  #擷取DTM的詞彙.匯入DB的TERMS與WEIGHT
  DTM_FETCH_TERMS<-function(){
    
    if(input$TERM_CK==TRUE){
      
      DTM_TERMS=colnames(DTM())
      DTM_TERMS_CLEAN=DTM_TERMS[-grep("GIVER_ID",DTM_TERMS)]
      DTM_TERMS_CLEAN=DTM_TERMS[-grep("V",DTM_TERMS)]
      DTM_TERM_DB=dbReadTable(con,"A_TERMS")[,1]
      DTM_TERM_WEIGHT_DB=dbReadTable(con,"A_TERMS_WEIGHT")[,1]
      for(u in 1:length(DTM_TERMS_CLEAN)){
        
        if(length(grep(DTM_TERMS_CLEAN[u],DTM_TERM_DB))!=0&&
           length(grep(DTM_TERMS_CLEAN[u],DTM_TERM_WEIGHT_DB))!=0){
          
        }else if(length(grep(DTM_TERMS_CLEAN[u],DTM_TERM_DB))==0){
          
          dbSendQuery(con,paste0("Insert into A_TERMS(TERMS)VALUES('",DTM_TERMS_CLEAN[u],"')"))
          
        }else if(length(grep(DTM_TERMS_CLEAN[u], DTM_TERM_WEIGHT_DB))==0)
          
          dbSendQuery(con,paste0("Insert into A_TERMS_WEIGHT(TERMS)VALUES('",DTM_TERMS_CLEAN[u],"')"))
        }
      dbCommit(con)
    }
    return("DONE")
  }
  observe(DTM_FETCH_TERMS())
  
  ST_ID<-function(){
    A_CUT=worker(stop_word ="/home/rstudio/USER_STOPWORDS",user="/home/rstudio/USER_TERMS",bylines=TRUE)
    if(input$CLASS_ID!="所有場次"){
      A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'","AND inter_review_id=",input$CLASS_ID)))
      
      A_DF_ONE_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
      for(u in 2:length(A_DF_ONE[,1]))
        A_DF_ONE_15=rbind(A_DF_ONE_15,toString(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[u]]) )
      
      output$DOWNLOAD_CORPUS<-downloadHandler(
        filename = function(){
          paste("data-", Sys.Date(), ".csv", sep="")
        },
        content = function(file){
          write.csv(A_DF_ONE_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
        }
      )
      
      cbind(A_DF_ONE[4],A_DF_ONE_15)
      
    }
    
    else if(input$CLASS_ID=="所有場次"){
      
      A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID,"'")))
      
      A_DF_ALL_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
      for(u in 2:length(A_DF_ALL[,1]))
        A_DF_ALL_15=rbind(A_DF_ALL_15,toString(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[u]]))
      
      output$DOWNLOAD_CORPUS<-downloadHandler(
        filename = function(){
          paste("data-", Sys.Date(), ".csv", sep="")
        },
        content = function(file){
          write.csv(A_DF_ALL_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
        }
      )
      cbind(A_DF_ALL[4],A_DF_ALL_15)
    }
  }
  
  ST_ID_U<-function(){
    
    if(length(input$CORPUS)==0){
    
      A_CUT=worker(stop_word ="/home/rstudio/USER_STOPWORDS",user="/home/rstudio/USER_TERMS",bylines=TRUE)
    
      if(input$CLASS_ID_U!="所有場次"){
      
        A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_U,"'","AND inter_review_id=",input$CLASS_ID_U)))
      
        A_DF_ONE_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
        
        for(u in 2:length(A_DF_ONE[,1]))
          A_DF_ONE_15=rbind(A_DF_ONE_15,toString(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[u]]))
      
        output$DOWNLOAD_CORPUS_U<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(A_DF_ONE_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        cbind(A_DF_ONE[4],A_DF_ONE_15)
        
      }
      
      else if(input$CLASS_ID_U=="所有場次"){
      
          A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_U,"'")))
      
          A_DF_ALL_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
          
          for(u in 2:length(A_DF_ALL[,1]))
            A_DF_ALL_15=rbind(A_DF_ALL_15,toString(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[u]]))
          
          output$DOWNLOAD_CORPUS_U<-downloadHandler(
            filename = function(){
              paste("data-", Sys.Date(), ".csv", sep="")
            },
            content = function(file){
              write.csv(A_DF_ALL_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
            }
          )
          cbind(A_DF_ALL[4],A_DF_ALL_15)
          
          }
    }else{
      
      A_CUT=worker(stop_word ="/home/rstudio/USER_STOPWORDS",user="/home/rstudio/USER_TERMS",bylines=TRUE)
      A_CUT_U=worker(stop_word = "/home/rstudio/USER_STOPWORDS",bylines=TRUE,user=input$CORPUS$datapath)
 
      if(input$CLASS_ID_U!="所有場次"){
        
        A_DF_ONE=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_U,"'","AND inter_review_id=",input$CLASS_ID_U)))
        
        A_DF_ONE_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
        
        for(u in 2:length(A_DF_ONE[,1]))
          A_DF_ONE_15=rbind(A_DF_ONE_15,toString(A_CUT_U[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        output$DOWNLOAD_CORPUS_U<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(A_DF_ONE_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        cbind(A_DF_ONE[4],A_DF_ONE_15)
        
      }
      
      else if(input$CLASS_ID_U=="所有場次"){
        
        A_DF_ALL=dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where OWNER_ID=","'",input$ST_ID_U,"'")))
        
        A_DF_ALL_15=toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
        
        for(u in 2:length(A_DF_ALL[,1]))
          A_DF_ALL_15=rbind(A_DF_ALL_15,toString(A_CUT_U[str_replace_all( A_DF_ALL[,15] ,"[^[:alnum:]]","") ][[u]]))
        
        output$DOWNLOAD_CORPUS_U<-downloadHandler(
          filename = function(){
            paste("data-", Sys.Date(), ".csv", sep="")
          },
          content = function(file){
            write.csv(A_DF_ALL_15,file,col.names = FALSE,row.names = FALSE,quote = FALSE)
          }
        )
        cbind(A_DF_ALL[4],A_DF_ALL_15)
        
      }
        
      
      }
  }
  
  ST_WEIGHT<-function(){}

  UPDATE_SELEINPUT_ST_ID<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,"ST_ID","ST_ID_N",levels(as.factor(A_DB[,3])))
  }
  observe(UPDATE_SELEINPUT_ST_ID())
  
  UPDATE_SELEINPUT_CLASS_ID<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,
                      "CLASS_ID",
                      "CLASS_ID_N",
                      c("所有場次",
                        levels(as.factor(A_DB[which(A_DB[,3]==input$ST_ID),2]))))
  }
  observe(UPDATE_SELEINPUT_CLASS_ID())
  
  UPDATE_SELEINPUT_ST_ID_U<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,"ST_ID_U","ST_ID_NU",levels(as.factor(A_DB[,3])))
  }
  observe(UPDATE_SELEINPUT_ST_ID_U())
  
  UPDATE_SELEINPUT_CLASS_ID_U<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,
                      "CLASS_ID_U",
                      "CLASS_ID_NU",
                      c("所有場次",
                        levels(as.factor(A_DB[which(A_DB[,3]==input$ST_ID_U),2]))))
  }
  observe(UPDATE_SELEINPUT_CLASS_ID_U())
  
  UPDATE_SELEINPUT_ST_ID_WEIGHT<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,"ST_ID_WEIGHT","ST_ID_WEIGHT_N",levels(as.factor(A_DB[,3])))
  }
  observe(UPDATE_SELEINPUT_ST_ID_WEIGHT())
  
  UPDATE_SELEINPUT_CLASS_ID_WEIGHT<-function(){
    A_DB=dbReadTable(con,"A_DB")
    updateSelectInput(session,
                      "CLASS_ID_WEIGHT",
                      "CLASS_ID_WEIGHT_N",
                      c("所有場次",
                        levels(as.factor(A_DB[which(A_DB[,3]==input$ST_ID_WEIGHT),2]))))
  }
  observe(UPDATE_SELEINPUT_CLASS_ID_WEIGHT())
  
  
  
  
  #資料庫初始設定
  DB_SET<-function(){
    dbSendQuery(con,"ALTER SYSTEM SET open_cursors = 60000")
  }
  observe(DB_SET())
  #系統資料表產生
  
  #輸入初始資料庫的TERM.TERM_WEIGHT的詞彙
  FT_TERMS_DB_GENERATE<-function(){
    if(length(dbReadTable(con,"A_TERMS")[,1])==0){
      USER_TERMS_ORG=read.table("/home/rstudio/USER_TERMS")
      for(u in 1:length(USER_TERMS_ORG[,1])){
        #11091 
        dbSendQuery(con, paste0("Insert into A_TERMS(TERMS)VALUES('",USER_TERMS_ORG[,1][u],"')") )
        }
      dbCommit(con)
    }
  }
  observe(FT_TERMS_DB_GENERATE())
  
  
  #點擊上傳評語詞彙，進行更新USER_TEMRS
  USER_TERMS_UPDATE<-function(){
    if(length(dbReadTable(con,"A_TERMS")[,1])!=0&&input$TERM_CK==TRUE)
    write.table(dbReadTable(con,"A_TERMS"),col.names=FALSE,row.names=FALSE,quote=FALSE,"/home/rstudio/USER_TERMS")
  } 
  observe(USER_TERMS_UPDATE())
  
  
  
  
  
  #設定SHINY參數值方法.
  SHINTYa_SET<-function(){
  }
  observe(SHINTYa_SET())
  #上傳資料表插入A_DB資料表
  InsertUpload<-function(){
    if(is.null(input$UPLOAD$datapath)==TRUE)
      return(NULL)
    if(input$UPLOAD_B!=0){
      A_UPLOAD=read.csv(input$UPLOAD$datapath)
      for(u in 1:length(A_UPLOAD[,1])){
        #判斷A_DB資料表與上傳資料表是否已有相同資料
        if(length(which(paste(dbReadTable(con,"A_DB")[,2],
                              dbReadTable(con,"A_DB")[,3],
                              dbReadTable(con,"A_DB")[,4],sep=",") ==
                        paste(A_UPLOAD[,2],
                              A_UPLOAD[,3],
                              A_UPLOAD[,4],sep=",")[u]))!=0  ||
           #根據資料清理規格，將不需要的資料剃除
           #空DATES欄位資料.無法除錯
           as.character(A_UPLOAD[,1])[u]=="" ||
           is.na(A_UPLOAD[, 2])[u] == TRUE   ||
           as.character(A_UPLOAD[,3])[u]=="" ||
           as.character(A_UPLOAD[,4])[u]=="" ||
           is.na(A_UPLOAD[, 5])[u]== TRUE ||
           is.na(A_UPLOAD[, 6])[u]== TRUE ||
           is.na(A_UPLOAD[, 7])[u]== TRUE ||
           is.na(A_UPLOAD[, 8])[u]== TRUE ||
           is.na(A_UPLOAD[, 9])[u]== TRUE ||
           is.na(A_UPLOAD[,10])[u]== TRUE ||
           is.na(A_UPLOAD[,11])[u]== TRUE || 
           is.na(A_UPLOAD[,12])[u]== TRUE ||
           is.na(A_UPLOAD[,13])[u]== TRUE ||
           is.na(A_UPLOAD[,14])[u]== TRUE ||
           as.character(A_UPLOAD[,15])[u]=="" ||
           as.character(A_UPLOAD[,16])[u]==""){
          
        }else{
          dbSendQuery(con,
                      paste0("INSERT INTO A_DB(CLASS_COURSE_NAME,INTER_REVIEW_ID,OWNER_ID,GIVER_ID,ITEM1,ITEM2,ITEM3,ITEM4,ITEM5,ITEM6,ITEM7,ITEM8,ITEM9,ITEM10,COMMENTS,REVIEW_DATE)VALUES('",
                             A_UPLOAD[u,][1][[1]],"',",
                             A_UPLOAD[u,][2][[1]],",'",
                             A_UPLOAD[u,][3][[1]],"','",
                             A_UPLOAD[u,][4][[1]],"',",
                             A_UPLOAD[u,][5][[1]],",",
                             A_UPLOAD[u,][6][[1]],",",
                             A_UPLOAD[u,][7][[1]],",",
                             A_UPLOAD[u,][8][[1]],",",
                             A_UPLOAD[u,][9][[1]],",",
                             A_UPLOAD[u,][10][[1]],",",
                             A_UPLOAD[u,][11][[1]],",",
                             A_UPLOAD[u,][12][[1]],",",
                             A_UPLOAD[u,][13][[1]],",",
                             A_UPLOAD[u,][14][[1]],",'",
                             A_UPLOAD[u,][15][[1]],"','",
                             A_UPLOAD[u,][16][[1]],"')"))
        }
      }
      dbCommit(con)
    }
    
  }
  observe(InsertUpload())
  #中文分詞處理
  SeparateWords<-function(){
    #判斷為第一次中文分詞?
    #if(length(dbReadTable(con,"A_SEPARATE_WORDS"))==0){}
    #第一次分詞不用比較SEP資料表
  }
  observe(SeparateWords())
  
  
}
# Run the application 
shinyApp(ui = ui, server = server)
#levels(as.factor(paste(dbReadTable(con,"A_DB")[,3],dbReadTable(con,"A_DB")[,4],sep=",")))
#if(which("D1034242097"==levels(as.factor(dbReadTable(con,"AUPLOAD_DB")[3][[1]])))!=0)
#print(which("D1034242097"==levels(as.factor(dbReadTable(con,"AUPLOAD_DB")[3][[1]]))))
#cmd2=paste0("INSERT INTO AUPLOAD_DB_CHECKLIST VALUES(","'",dbReadTable(con,"AUPLOAD_DB")[1,][3],"','",dbReadTable(con,"AUPLOAD_DB")[1,][4],"','",dbReadTable(con,"AUPLOAD_DB")[1,][11],"')")
#判斷是否有相應字詞
#if(length(which("D1044242777"==levels(as.factor(dbReadTable(con,"AUPLOAD_DB")[3][[1]]))))==0)
#指令變數
#cmd=paste0("INSERT INTO AUPLOAD_DB VALUES(","'",a[1,][1],"',",a[1,][2],",'",a[1,][3],"','",a[1,][4],"',",a[1,][5],",",a[1,][6],",",a[1,][7],",",a[1,][8],",",a[1,][9],",",a[1,][10],",'",a[1,][11],"',","TO_DATE('",a[1,][12],"','YYYY/MM/DD'))")
#DB上的學號清單
#levels(as.factor(dbReadTable(con,"AUPLOAD_DB")[3][[1]]))
#DB上的學號清單_學號位置
#which(dbReadTable(con,"A_DB")[3][[1]] ==levels(as.factor(paste(dbReadTable(con,"A_DB")[,3])))[1])
#dbReadTable(con,"A_DB")[3]
#levels(as.factor(paste(dbReadTable(con,"A_DB")[,3])))[1]

#paste(dbReadTable(con,"A_DB")[,3],dbReadTable(con,"A_DB")[,4],dbReadTable(con,"A_DB")[,16],sep=",")
#paste(dbReadTable(con,"A_UPLOAD")[,3],dbReadTable(con,"A_UPLOAD")[,4],dbReadTable(con,"A_UPLOAD")[,16],sep=",")
#paste(dbReadTable(con,"A_DB")[,3],dbReadTable(con,"A_DB")[,4],dbReadTable(con,"A_DB")[,16],sep=",")==paste(dbReadTable(con,"A_UPLOAD")[,3],dbReadTable(con,"A_UPLOAD")[,4],dbReadTable(con,"A_UPLOAD")[,16],sep=",")[1]
#!!
#which(paste(dbReadTable(con,"A_DB")[,3],dbReadTable(con,"A_DB")[,4],dbReadTable(con,"A_DB")[,16],sep=",")==paste(dbReadTable(con,"A_UPLOAD")[,3],dbReadTable(con,"A_UPLOAD")[,4],dbReadTable(con,"A_UPLOAD")[,16],sep=",")[1])
#依據DB資料表的OWNER_ID,GIVER_ID,DATES的3PK.判斷UPLOAD資料表是否有重覆值.找不到重覆值的話會顯示is.na=TRUE,拜屌可以上傳該值。
#is.na(which((paste(dbReadTable(con,"A_DB")[,3],dbReadTable(con,"A_DB")[,4],dbReadTable(con,"A_DB")[,16],sep=",")==paste(dbReadTable(con,"A_UPLOAD")[,3],dbReadTable(con,"A_UPLOAD")[,4],dbReadTable(con,"A_UPLOAD")[,16],sep=",")[1])==TRUE)[1])
#A_UPLOAD=(read.csv("/home/rstudio/FINAL_ODB_APP/Final_ODB_APP_7/2017-12-27-dbms互評記錄_english_TEST.csv"))

#which(paste(A_DB[,1],A_DB[,16],sep=",") == paste(levels(as.factor(A_DB[,1]))[1],levels(as.factor(A_DB[,16]))[1],sep=","))

#which(A_DB[,1]==levels(as.factor(A_DB[,1])))
#判斷是否符合levels資料?資料長度==0就是沒有,!=0就是有
#length(which(ALL_F==paste(levels(ST_F)[1],levels(DATES_F)[2],levels(OWNER_F)[5])))
#判斷下拉式選單是否有符合上個下拉式選單選項?如果長度!=0則判斷有,並列出名稱?
#length(which(paste(ST_F,DATES_F)==paste(levels(ST_F)[1],levels(DATES_F)[5])))

#dbdata[which(dbdata["REVIEW_DATE"]=="2017-11-07"),]

#Error in system(paste(which, shQuote(names[i])), intern = TRUE, ignore.stderr = TRUE) : 
#無法 popen '/usr/bin/which 'pdflatex' 2>/dev/null' ，可能的原因是 '無法配置記憶體'

#dbFetch(dbSendStatement(con,paste0("SELECT * FROM A_DB where GIVER_ID=","'",A,"'","AND inter_review_id=",B)))


#it=itoken(str_replace_all( A_DF_ONE_15 , "[^[:alnum:]]"," ") )

#DTM_DF=as.data.frame(dtm)

#DTM_DF[,-grep("V",colnames(DTM_DF),TRUE)]

#dbSendQuery(con,paste0("INSERT INTO A_TERMS(TERMS)VALUES('",colnames(DTM_DF[,-grep("V",colnames(DTM_DF),TRUE)])[1],"')"))

#toString(A_CUT[str_replace_all(str_replace_all(A_CUT[str_replace_all( A_DF_ONE[,15] ,"[^[:alnum:]]","")],"[^[:alnum:]]",""),"c","")][[1]])
